paso 1: mapear la base de datos de sql server a la aplicación asp.net core,

luego de crear el archivo de configuración app setting,
toca instalar los paquetes nuggets para implementar entity framework y sql server
aparte de eso utilizaremos el marco de trabajo dataBase first,
por lo que debemos instalar el paquete nugget de:

•	Microsoft.EntityFrameworkCore.SqlServer
•	Microsoft.EntityFrameworkCore.Tools
•	Microsoft.EntityFrameworkCore.Design

luego ejecutamos el siguiente comando en la consola del administrador de paquetes:

dotnet ef dbcontext scaffold "server=localhost,1433;database=pragmadb;user=sa;password=SuperSecret123!;TrustServerCertificate=True" Microsoft.EntityFrameworkCore.SqlServer -o Models

pd: 
TrustServerCertificate=True es para evitar problemas de certificado en el servidor de sql server,
1433 es el puerto por defecto de sql server que tenemos montado en el docker de la aplicación


esto generará las clases de modelo y el contexto de la base de datos en la carpeta Models.
models es la carpeta donde se generarán las clases de modelo y el contexto de la base de datos.


luego de eso debemos crear la cadena de conexión en el archivo appsettings.json
{
  "ConnectionStrings": {
	"DefaultConnection": "server=localhost,1433;database=pragmadb;user=sa;password
	=SuperSecret
	123!;TrustServerCertificate=True"
  },
  "Logging": {
	"LogLevel": {
	  "Default": "Information",
	  "Microsoft.AspNetCore": "Warning"
	}
  },
  "AllowedHosts": "*"

luego de eso debemos crear la clase de contexto de la base de datos en el arvo Program.cs

builder.Services.AddDbContext<PragmadbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("Example")
                     ?? throw new Exception("missing connectionstring")));


en GetConnectionString("cursoEF") debemos poner el nombre de la cadena de conexión que hemos creado en el archivo appsettings.json


luego en el archivo PragmaDbContext.cs debemos eliminar el siguiente fragmento de codigo 

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("server=localhost,1433;database=pragmadb;user=sa;password=SuperSecret123!;TrustServerCertificate=True");

ya que hemos configurado la cadena de conexión en el archivo appsettings.json y en el archivo Program.cs

2 paso: crear el controlador de la api

3 paso: crear el servicio

4 paso : crear los repositorys